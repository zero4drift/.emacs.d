;; Grouped init.el enhanced by use-package

;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;; (package-initialize)


;; elpa
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (setq package-archives
	'(("melpa" . "http://elpa.emacs-china.org/melpa/")
	  ("gnu" . "http://elpa.emacs-china.org/gnu/"))))

(eval-when-compile
  (require 'use-package))

;; custom file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file))


;; 设置垃圾回收，在Windows下，emacs25版本会频繁出发垃圾回收，所以需要设置
(when (eq system-type 'windows-nt)
  (setq gc-cons-threshold (* 512 1024 1024))
  (setq gc-cons-percentage 0.5)
  (run-with-idle-timer 5 t #'garbage-collect)
  ;; 显示垃圾回收信息，这个可以作为调试用
  ;; (setq garbage-collection-messages t)
  )


;; ui
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq-default cursor-type 'bar)
(global-linum-mode t)
(global-hl-line-mode t)

;; just do not show the original startup screen
(setq inhibit-startup-screen -1)

;; ignore the ring bell
(setq ring-bell-function 'ignore)

;; too many typing when emacs asks yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;; make symbols look better
(global-prettify-symbols-mode 1)

;; Auto generated by cnfonts
;; <https://github.com/tumashu/cnfonts>
(set-face-attribute
 'default nil
 :font (font-spec :name "Source Code Pro"
                  :weight 'normal
                  :slant 'normal
                  :size 10.0))
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font
   (frame-parameter nil 'font)
   charset
   (font-spec :name "汉仪楷体简"
              :weight 'normal
              :slant 'normal
              :size 12.0)))

;; modeline
(defun mode-line-fill (face reserve)
  "Return empty space using FACE and leaving RESERVE space on the right."
  (unless reserve
    (setq reserve 20))
  (when (and window-system (eq 'right (get-scroll-bar-mode)))
    (setq reserve (- reserve 3)))
  (propertize " "
	      'display `((space :align-to
				(- (+ right right-fringe right-margin) ,reserve)))
	      'face face))

(defun buffer-encoding-abbrev ()
  "The line ending convention used in the buffer."
  (let ((buf-coding (format "%s" buffer-file-coding-system)))
    (if (string-match "\\(dos\\|unix\\|mac\\)" buf-coding)
	(match-string 1 buf-coding)
      buf-coding)))

(setq-default my-flycheck-mode-line
      '(:eval
	(pcase flycheck-last-status-change
	  (`not-checked nil)
	  (`no-checker (propertize " -" 'face 'warning))
	  (`running (propertize " ✷" 'face 'success))
	  (`errored (propertize " !" 'face 'error))
	  (`finished
	   (let* ((error-counts (flycheck-count-errors flycheck-current-errors))
		  (no-errors (cdr (assq 'error error-counts)))
		  (no-warnings (cdr (assq 'warning error-counts)))
		  (face (cond (no-errors 'error)
			      (no-warnings 'warning)
			      (t 'success))))
	     (propertize (format "[%s/%s]" (or no-errors 0) (or no-warnings 0))
			 'face face)))
	  (`interrupted " -")
	  (`suspicious '(propertize " ?" 'face 'warning)))))

(setq-default mode-line-format
	      (list
	       "%1 "
	       ;; the buffer name; the file name as a tool tip
	       '(:eval (propertize "%b " 'face 'font-lock-keyword-face
				   'help-echo (buffer-file-name)))
	       
	       " [" ;; insert vs overwrite mode, input-method in a tooltip
	       '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
				   'face 'font-lock-preprocessor-face
				   'help-echo (concat "Buffer is in "
						      (if overwrite-mode
							  "overwrite"
							"insert") " mode")))

	       ;; was this buffer modified since the last save?
	       '(:eval (when (buffer-modified-p)
			 (concat ","  (propertize "Mod"
						  'face 'font-lock-warning-face
						  'help-echo "Buffer has been modified"))))

	       ;; is this buffer read-only?
	       '(:eval (when buffer-read-only
			 (concat ","  (propertize "RO"
						  'face 'font-lock-type-face
						  'help-echo "Buffer is read-only"))))
	       "] "

	       ;; relative position, size of file
	       "["
	       (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
	       "/"
	       (propertize "%I" 'face 'font-lock-constant-face) ;; size
	       "] "

	       ;; the current major mode for the buffer.
	       '(:eval (propertize "%m" 'face 'font-lock-string-face
				   'help-echo buffer-file-coding-system))

	       "%1 "
	       my-flycheck-mode-line
	       "%1 "

	       ;; minor modes but I feel that's too many
	       ;; minor-mode-alist
	       
	       " "
	       ;; git info
	       `(vc-mode vc-mode)

	       " "
	       
	       ;; global-mode-string goes in mode-line-misc-info
	       mode-line-misc-info

	       (mode-line-fill 'mode-line 20)

	       ;; line and column
	       "(" ;; '%02' to set to 2 chars at least; prevents flickering
	       (propertize "%02l" 'face 'font-lock-type-face) ","
	       (propertize "%02c" 'face 'font-lock-type-face)
	       ") "

	       '(:eval (buffer-encoding-abbrev))
	       mode-line-end-spaces " "
	       ;; add the time, with the date and the emacs uptime in the tooltip
	       '(:eval (propertize (format-time-string "%H:%M")
				   'help-echo
				   (concat (format-time-string "%c; ")
					   (emacs-uptime "Uptime:%hh"))))))


;; functions and related keybindings
;; enhancement and binding for occur
(defun occur-dwim ()
  "Call 'occur' with a same default."
  (interactive)
  (push (if (region-active-p)
	    (buffer-substring-no-properties
	     (region-beginning)
	     (region-end))
	  (let ((sym (thing-at-point 'symbol)))
	    (when (stringp sym)
	      (regexp-quote sym))))
	regexp-history)
  (call-interactively 'occur))
(global-set-key (kbd "M-s o") 'occur-dwim)

;; bindings for recentf
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; bindings for dired
(with-eval-after-load 'dired
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))

;; shortcut to open init.el
(defun open-init()
  (interactive)
  (find-file (expand-file-name "init.el" user-emacs-directory)))
(global-set-key (kbd "<f2>") 'open-init)

;; shortcut to find function, variable
(global-set-key (kbd "C-h C-f") 'find-function)
(global-set-key (kbd "C-h C-v") 'find-variable)
(global-set-key (kbd "C-h C-k") 'find-function-on-key)

;; functions defined for indent
(defun indent-buffer ()
  "Indent the current visited buffer."
  (interactive)
  (indent-region (point-min) (point-max)))

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buyffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
	(progn
	  (indent-region (region-beginning) (region-end))
	  (message "Indented selected region"))
      (progn
	(indent-buffer)
	(message "Indented buffer.")))))

;; shortcut to format buffer or selected region
(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)

;; hippie-expand enhanced
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
					 try-expand-dabbrev-all-buffers
					 try-expand-dabbrev-from-kill
					 try-complete-file-name-partially
					 try-complete-file-name
					 try-expand-all-abbrevs
					 try-expand-list
					 try-expand-line
					 try-complete-lisp-symbol-partially
					 try-complete-lisp-symbol))

;; shortcut to auto complete when company not triggered
(global-set-key (kbd "C-c /") 'hippie-expand)


;; files, folders, buffers and text
;; dired
(setq-default dired-dwim-target t)
(setq-default dired-recursive-copies 'always)
(setq-default dired-recursive-deletes 'always)
(put 'dired-find-alternate-file 'disabled nil)

;; use fundamental-mode to open large files
(defun zero4drift-check-large-file ()
  (when (> (buffer-size) 500000)
    (progn (fundamental-mode)
	   (hl-line-mode -1))))
(add-hook 'find-file-hook 'zero4drift-check-large-file)

;; when the file is modified, the related buffer will change.
(global-auto-revert-mode t)

;; do not make backup files
(setq make-backup-files nil)

;; do not auto save
(setq auto-save-default nil)

;; length of one line should not exceed 80 characters
(setq-default fill-column 80)

;; active recentf mode and set the max menu items
(recentf-mode 1)
(setq-default recentf-max-menu-items 25)

;; encoding system
(setq-default language-environment 'utf-8)

;; show parens enhanced
(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
(define-advice show-paren-function (:around (fn) fix-show-paren-function)
  "Hightlight enclosing parens"
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))

;; on-the-fly indentation
(electric-indent-mode t)

;; typed text replaces the selection
(delete-selection-mode t)

;; associate e-lisp-mode with abbrev-mode, define an abbrev
(add-hook 'emacs-lisp-mode-hook (lambda () (abbrev-mode t)))
(define-abbrev-table 'global-abbrev-table '(
					    ;; signature
					    ("z4d" "zero4drift")
					    ))


;; org
(use-package org
  :ensure t
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture)
  ("C-c C-x t" . org-clock-sum-today-by-tags)
  :init
  ;; used by org-clock-sum-today-by-tags
  ;; copied from 用Org-mode实践《奇特的一生》
  (defun filter-by-tags ()
    (let ((head-tags (org-get-tags-at)))
      (member current-tag head-tags)))

  (defun org-clock-sum-today-by-tags (timerange &optional tstart tend noinsert)
    (interactive "P")
    (let* ((timerange-numeric-value (prefix-numeric-value timerange))
	   (files (org-add-archive-files (org-agenda-files)))
	   (include-tags '("READING" "JOBS" "WORKOUT"
			   "LEARNING" "OTHER"))
	   (tags-time-alist (mapcar (lambda (tag) `(,tag . 0)) include-tags))
	   (output-string "")
	   (tstart (or tstart
		       (and timerange (equal timerange-numeric-value 4) (- (org-time-today) 86400))
		       (and timerange (equal timerange-numeric-value 16) (org-read-date nil nil nil "Start Date/Time:"))
		       (org-time-today)))
	   (tend (or tend
		     (and timerange (equal timerange-numeric-value 16) (org-read-date nil nil nil "End Date/Time:"))
		     (+ tstart 86400)))
	   h m file item prompt donesomething)
      (while (setq file (pop files))
	(setq org-agenda-buffer (if (file-exists-p file)
				    (org-get-agenda-file-buffer file)
				  (error "No such file %s" file)))
	(with-current-buffer org-agenda-buffer
	  (dolist (current-tag include-tags)
	    (org-clock-sum tstart tend 'filter-by-tags)
	    (setcdr (assoc current-tag tags-time-alist)
		    (+ org-clock-file-total-minutes (cdr (assoc current-tag tags-time-alist)))))))
      (while (setq item (pop tags-time-alist))
	(unless (equal (cdr item) 0)
	  (setq donesomething t)
	  (setq h (/ (cdr item) 60)
		m (- (cdr item) (* 60 h)))
	  (setq output-string (concat output-string (format "[-%s-] %.2d:%.2d\n" (car item) h m)))))
      (unless donesomething
	(setq output-string (concat output-string "[-Nothing-] Done nothing!!!\n")))
      (unless noinsert
	(insert output-string))
      output-string))
  :config
  ;; allow e-lisp code evaluated in org files
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
			       (ledger . t)))
  :custom
  (org-src-fontify-natively t)
  ;; move org clock info into drawer
  (org-clock-into-drawer t)
  ;; move org log info into drawer
  (org-log-into-drawer t)
  (org-todo-keywords
   '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
  (org-agenda-files '("~/org"))
  (org-tag-alist
   '(("JOBS" . ?j)
     ("LEARNING" . ?l)
     ("OTHER" . ?o)
     ("READING" . ?r)
     ("WORKOUT" . ?w)))
  (org-capture-templates '(("i"
			    "Quick thoughts put in inbox, 'wait' state assigned at first"
			    entry
			    (file+headline "~/org/gtd.org"  "Inbox")
			    "* WAIT %?\n %i\n"
			    :empty-lines 1)
			   ("t"
			    "Simple todo tasks, which are too trivial to be grouped"
			    entry
			    (file+headline "~/org/gtd.org"  "Tasks")
			    "* TODO [#C] %?\n %i\n"
			    :empty-lines 1)
			   ("r"
			    "Tasks better treated as reminders"
			    entry
			    (file+headline "~/org/gtd.org"  "Remind")
			    "* TODO [#C] %?\n %i\n"
			    :empty-lines 1))))

;; org-pomodoro
(use-package org-pomodoro
  :ensure t)

;; iedit
(use-package iedit
  :ensure t
  :bind
  ("C-;" . iedit-mode))

;; expand-region
(use-package expand-region
  :ensure t
  :bind
  ("C-=". er/expand-region))

;; company
(use-package company
  :ensure t
  :custom
  (company-idle-delay 0.5)
  (company-show-numbers t)
  (company-tooltip-align-annotations t)
  (company-minimum-prefix-length 3)
  :init
  (global-company-mode)
  (add-to-list 'company-transformers #'company-sort-by-occurrence)
  :bind
  (:map company-active-map
	("M-n" . nil)
	("M-p" . nil)
	("C-n" . #'company-select-next)
	("C-p" . #'company-select-previous)))

;; ycmd
(use-package ycmd
  :if (not (eq system-type 'windows-nt))
  :ensure t
  :custom
  (ycmd-server-command `("python" ,(file-truename "~/github/ycmd/ycmd/")))
  (ycmd-global-config (file-truename "~/github/global-config.py"))
  :hook
  ((c-mode c++-mode) . ycmd-mode))

;; comany-ycmd
(use-package company-ycmd
  :if (not (eq system-type 'windows-nt))
  :ensure t
  :hook (ycmd-mode . company-ycmd-setup))

;; flycheck-ycmd
(use-package flycheck-ycmd
  :if (not (eq system-type 'windows-nt))
  :ensure t
  :hook (ycmd-mode . flycheck-ycmd-setup))

;; flycheck
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode))

;; hungry-delete
(use-package hungry-delete
  :ensure t
  :init
  (global-hungry-delete-mode))

;; ledger-mode
(use-package ledger-mode
  :ensure t
  :mode "\\.ledger$")

;; magit
(use-package magit
  :ensure t
  :bind
  ("C-x g" . magit-status))

;; popwin
(use-package popwin
  :ensure t
  :config (popwin-mode 1))

;; smartparens
(use-package smartparens
  :ensure t
  :init (require 'smartparens-config)
  :hook (prog-mode . smartparens-mode))

;; swiper
(use-package swiper
  :ensure t
  :bind
  ("\C-s" . swiper)
  ("C-c C-r" . ivy-resume)
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-h f" . cunsel-describe-function)
  ("C-h v" . counsel-describe-variable)
  ("C-h C-l" . counsel-find-library)
  ("C-h C-i" . counsel-info-lookup-symbol)
  ("C-h u" . counsel-unicode-char)
  ("C-c g" . counsel-git)
  ("C-c j" . counsel-git-grep)
  ("C-c k" . counsel-ag)
  ("C-x l" . counsel-locate)
  ("C-S-o" . counsel-rhythmbox)
  (:map minibuffer-local-map
	("C-r" . counsel-minibuffer-history))
  :custom
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t)
  :config
  (ivy-mode 1))

;; solarized-theme
(use-package solarized-theme
  :ensure t
  :config
  (load-theme 'solarized-dark t))

;; which-key
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  :config
  (which-key-setup-side-window-right-bottom))


(provide 'init)
;;; init.el ends here
